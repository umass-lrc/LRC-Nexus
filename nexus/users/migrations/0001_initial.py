# Generated by Django 5.2.1 on 2025-05-28 03:26

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='NexusUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'ordering': ['last_name', 'first_name', 'email'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Positions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.PositiveSmallIntegerField(choices=[(0, 'Tech'), (1, 'SI'), (2, 'Tutor'), (3, 'SI PM'), (4, 'Tutor PM'), (5, 'Group Tutor'), (6, 'OURS Mentor'), (7, 'Office Assistant'), (8, 'Office Assistant PM'), (9, 'OURS Mentor PM')], help_text='The position the user has.')),
                ('hourly_pay', models.DecimalField(decimal_places=2, default=0.0, help_text='Hourly pay for the position.', max_digits=5)),
                ('semester', models.ForeignKey(help_text='The semester position is for.', on_delete=django.db.models.deletion.RESTRICT, to='core.semester')),
                ('user', models.ForeignKey(help_text='User position is for.', on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['semester', 'user__last_name', 'user__first_name', 'user__email', 'position'],
                'unique_together': {('semester', 'user', 'position')},
            },
        ),
        migrations.CreateModel(
            name='PositionGroups',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the group.', max_length=100)),
                ('semester', models.ForeignKey(help_text='The semester group is for.', on_delete=django.db.models.deletion.CASCADE, to='core.semester')),
                ('members', models.ManyToManyField(help_text='Members of the group.', related_name='groups', to='users.positions')),
            ],
            options={
                'ordering': ['semester', 'name'],
                'unique_together': {('semester', 'name')},
            },
        ),
    ]
